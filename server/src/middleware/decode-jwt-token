const jwt = require('jsonwebtoken');
import { Request, Response, NextFunction } from 'express';
import { env } from '../utils/myVariables';
import { DecodeType } from '../types/types';
import { User } from '../models/user.model';
import mongoose from 'mongoose';

const adminRight = [
  'create-user',
  'create-role',
  'get-users',
  'get-roles',
  'delete-user',
  'delete-role',
  'update-user',
  'update-role',
];
const userRight = ['create-user'];

const rightToAction = (per: any) => {
  return (req: Request, res: Response, next: NextFunction) => {
    const authHeader = req.header('Authorization');
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.json({
        success: false,
        message: 'Access Token not found',
      });
    }

    try {
      const jwtAccessToken = env.JWT_ACCESS_KEY;
      jwt.verify(token, jwtAccessToken, async (err: any, decoded: DecodeType) => {
        if (err) {
          return res.json('Internal Server Error');
        } else {
          res.locals.jwt = decoded;

          const user = await User.aggregate([
            {
              $match: {
                _id: new mongoose.Types.ObjectId(`${decoded.id}`),
              },
            },
            {
              $lookup: {
                from: 'roles',
                localField: 'role',
                foreignField: 'roleType',
                as: 'detailRole',
              },
            },
          ]);
          if (!user) {
            res.json({
              success: false,
              message: 'Can not find this user',
            });
          }

          const roleRight = user && user[0].detailRole[0].permission;
          if (roleRight.includes(per)) {
            next();
          } else {
            return res.json({
              success: false,
              message: 'You are not allowed to do that',
            });
          }
        }
      });
    } catch (error) {
      return res.json({
        success: false,
        message: 'Invalid Token',
      });
    }
  };
};

module.exports = {
  rightToAction,
};
